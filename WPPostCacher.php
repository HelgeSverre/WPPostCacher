<?php


/**
* Class used for Caching and displaying WordPress RSS feeds, 
* typical usecase for this would be to display your latest blog posts
* on a non-wordpress page.
* 
*
* @author  Helge Sverre <email@helgesverre.com>
*
* @param string $feedurl URL of your WordPress RSS feed 
* @param string $cachefile Filename of the cachefile that will be used, default is cache.html
* @param int $cachexpiry amount of seconds before the cache expires and a new one will be generated.
* @return object WPPostCacher instance.
*/
class WPPostCacher {

	private $feedurl;
	private $cachefile;
	private $cacheexpiry;
	private $data;

	public function __construct($feedurl, $cachefile = "cache.html", $cacheexpiry = 604800) {
		$this->feedurl = $feedurl;
		$this->cachefile = $cachefile;
		$this->cacheexpiry = $cacheexpiry;
	}


	/**
	* Function responsible for fetching the RSS feed data and parsing it into an object
	*
	* @author  Helge Sverre <email@helgesverre.com>
	*
	* @param string $RSSUrl URL to a wordpress rss feed
	* @return object object of all the posts from the wordpress rss feed
	*/
	private function GetRSS($RSSUrl) {
		$feed = file_get_contents($RSSUrl);
		if ($feed) {
			// Fetch the XML from the feed
			$xml = simplexml_load_string($feed);

			// Convert it to a more manageble object
			$rssobj = json_decode(json_encode($xml->channel));

			// return said object.
			return $rssobj;
		} else {
			return false;
		}
	}


	/**
	* Function responsible for saving the cache file.
	*
	* @author  Helge Sverre <email@helgesverre.com>
	*
	* @param string $filename filename of the cache file
	* @return string $data the data to be cached.
	*/
	private function CreateCache($filename, $data) {
		try {
			$fh = fopen($filename, "w");
			fwrite($fh, $data);
			fclose($fh);
			return true;
		} catch (Exception $e) {
			return false;
		}
	}


	/**
	* Function responsible for extracting and generating li elements from the RSS Object
	*
	* @author  Helge Sverre <email@helgesverre.com>
	*
	* @param object $posts object generated by GetRSS()
	* @return int $postCount the number of posts to display
	*/
	private function GetPosts($posts, $postCount = 6) {	
		try {
			$data = "";
			for($i = 0; $i < $postCount; $i++) {
				$data .= "<li><a href='" 
					. $posts->item[$i]->link
					. "'>"
					. htmlentities($posts->item[$i]->title)
					. "</a></li>\n";
			}
			return $data;
		} catch (Exception $e) {
			return false;
		}
	}


	/**
	* Function responsible for outputting the generated li elements
	*
	* @author  Helge Sverre <email@helgesverre.com>
	*
	*/
	public function DisplayPosts() {
		echo $this->data;
	}


	/**
	* Function responsible for generating the cache
	*
	* @author  Helge Sverre <email@helgesverre.com>
	*
	*/
	private function GenerateCache() {
		// grab the latest RSS feed
		$RSSObj = $this->GetRSS($this->feedurl);

		// extract the posts from the rss feed
		$this->data = $this->GetPosts($RSSObj);

		// Create a new cache file
		$this->CreateCache($this->cachefile, $this->data);
	}


	/**
	* Function responsible for running the cacher, invoke this before using DisplayPosts()
	*
	* @author  Helge Sverre <email@helgesverre.com>
	*
	*/
	public function Run() {
	
		if (file_exists($this->cachefile)) {

			$modified_seconds_ago = time() - filemtime($this->cachefile);

			// if the file is less than a week old, use the cache.
			if ($modified_seconds_ago < $this->cacheexpiry ) {

				// read from the cache
				$this->data = file_get_contents($this->cachefile);
			} else 
				$this->GenerateCache();
		} else 
			$this->GenerateCache();
	}
}

?>
